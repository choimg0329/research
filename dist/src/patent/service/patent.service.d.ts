import { PrismaService } from '../../../prisma/prisma.service';
import { CreatePatentDto } from '../dto/create-patent.dto';
import { UpdatePatentDto } from '../dto/update-patent.dto';
export declare class PatentService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    create(createPatentDto: CreatePatentDto): Promise<{
        patent_id: bigint;
        title: string | null;
        application_number: string | null;
        registration_number: string | null;
        publication_number: string | null;
        country: string | null;
        applicant_name: string | null;
        application_title: string | null;
        applicant: string | null;
        application_date: Date | null;
        registration_date: Date | null;
        publication_date: Date | null;
        summary: string | null;
        cno: bigint | null;
        user_no: bigint | null;
        insert_timestamp: Date;
        update_timestamp: Date;
        is_deleted: boolean;
    }>;
    findAll(): Promise<{
        patent_id: bigint;
        title: string | null;
        application_number: string | null;
        registration_number: string | null;
        publication_number: string | null;
        country: string | null;
        applicant_name: string | null;
        application_title: string | null;
        applicant: string | null;
        application_date: Date | null;
        registration_date: Date | null;
        publication_date: Date | null;
        summary: string | null;
        cno: bigint | null;
        user_no: bigint | null;
        insert_timestamp: Date;
        update_timestamp: Date;
        is_deleted: boolean;
    }[]>;
    findOne(id: number): Promise<{
        patent_id: bigint;
        title: string | null;
        application_number: string | null;
        registration_number: string | null;
        publication_number: string | null;
        country: string | null;
        applicant_name: string | null;
        application_title: string | null;
        applicant: string | null;
        application_date: Date | null;
        registration_date: Date | null;
        publication_date: Date | null;
        summary: string | null;
        cno: bigint | null;
        user_no: bigint | null;
        insert_timestamp: Date;
        update_timestamp: Date;
        is_deleted: boolean;
    } | null>;
    update(id: number, updatePatentDto: UpdatePatentDto): Promise<{
        patent_id: bigint;
        title: string | null;
        application_number: string | null;
        registration_number: string | null;
        publication_number: string | null;
        country: string | null;
        applicant_name: string | null;
        application_title: string | null;
        applicant: string | null;
        application_date: Date | null;
        registration_date: Date | null;
        publication_date: Date | null;
        summary: string | null;
        cno: bigint | null;
        user_no: bigint | null;
        insert_timestamp: Date;
        update_timestamp: Date;
        is_deleted: boolean;
    }>;
    remove(id: number): Promise<{
        patent_id: bigint;
        title: string | null;
        application_number: string | null;
        registration_number: string | null;
        publication_number: string | null;
        country: string | null;
        applicant_name: string | null;
        application_title: string | null;
        applicant: string | null;
        application_date: Date | null;
        registration_date: Date | null;
        publication_date: Date | null;
        summary: string | null;
        cno: bigint | null;
        user_no: bigint | null;
        insert_timestamp: Date;
        update_timestamp: Date;
        is_deleted: boolean;
    }>;
}
